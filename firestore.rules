rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isBusinessOwner(businessId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/businesses/$(businessId)) &&
        get(/databases/$(database)/documents/businesses/$(businessId)).data.ownerId == request.auth.uid;
    }

    // Businesses collection
    match /businesses/{businessId} {
      allow read: if isAuthenticated() && isBusinessOwner(businessId);
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isBusinessOwner(businessId);
    }

    // Phone Numbers collection
    match /phoneNumbers/{numberId} {
      allow read: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
      allow create: if isAuthenticated() && 
        isBusinessOwner(request.resource.data.businessId);
      allow update, delete: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
    }

    // Leads collection
    match /leads/{leadId} {
      allow read: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
      allow create: if isAuthenticated() && 
        isBusinessOwner(request.resource.data.businessId);
      allow update, delete: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
    }

    // Calls collection
    match /calls/{callId} {
      allow read: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
      allow create: if isAuthenticated() && 
        isBusinessOwner(request.resource.data.businessId);
      allow update: if isAuthenticated() && 
        isBusinessOwner(resource.data.businessId);
      allow delete: if false; // Calls should not be deletable
    }
  }
} 